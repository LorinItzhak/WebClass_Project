openapi: 3.0.0
info:
  title: Assignment 1 Web Class API
  version: 1.0.0
  description: API for user authentication, post management, and comments

servers:
  - url: http://localhost:3000 # Adjust this to your actual server URL

paths:
  /users/register:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User successfully registered
        '400':
          description: Bad request (e.g., missing fields)

  /users/login:
    post:
      summary: Login user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized

  /posts:
    get:
      summary: Get all posts
      tags:
        - Posts
      parameters:
        - in: query
          name: owner
          schema:
            type: string
          description: Filter posts by owner ID
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      summary: Create a new post
      tags:
        - Posts
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPost'
      responses:
        '201':
          description: Post created successfully
        '401':
          description: Unauthorized

  /posts/{id}:
    get:
      summary: Get a post by ID
      tags:
        - Posts
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
    put:
      summary: Update a post by ID
      tags:
        - Posts
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePost'
      responses:
        '200':
          description: Post updated successfully
          application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
  /comments:
    get:
      summary: Get all comments
      tags:
        - Comments
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      summary: Add a new comment
      tags:
        - Comments
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewComment'
      responses:
        '201':
          description: Comment created successfully
        '401':
          description: Unauthorized

  /comments/{id}:
    get:
      summary: Get a comment by ID
      tags:
        - Comments
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          description: Comment not found

    put:
      summary: Update a comment
      tags:
        - Comments
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateComment'
      responses:
        '200':
          description: Comment updated successfully
        '404':
          description: Comment not found

    delete:
      summary: Delete a comment
      tags:
        - Comments
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comment deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Comment not found
components:
  schemas:
    UserRegistration:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    NewComment:
      type: object
      required:
        - content
        - postId
      properties:
        content:
          type: string
        postId:
          type: string

    UpdateComment:
      type: object
      properties:
        content:
          type: string

    Comment:
      type: object
      properties:
        _id:
          type: string
        content:
          type: string
        postId:
          type: string
        owner:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
        _id:
          type: string

    NewPost:
      type: object
      required:
        - title
        - content
        - owner
      properties:
        title:
          type: string
        content:
          type: string
        owner:
          type: string

    Post:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        content:
          type: string
        owner:
          type: string

    UpdatePost:
      type: object
      properties:
        title:
          type: string
        content:
          type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT